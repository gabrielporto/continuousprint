{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset h1, .md-content__button { display: none; } .md-typeset h2 { font-size: 3em; margin-top: 0px; } .cpq_titlecard { text-align: center; display: flex; flex-direction: column; align-items: center; font-family: \"Cabin Regular\"; } .cpq_titlecard > div { padding-bottom: 20px; } .cpq_titlecard img { max-width: 240px; } Continuous Print Queue For an overview, check out the plugin repository page . If you're looking for source code, head over to the github repository . Use the nav section on the left to learn more. Get new features faster and help support the plugin! CPQ is looking for early release testers! Enable Release Candidate in your Software Update settings to test releases early. When you discover bugs or think of improvements create issues so we can make the plugin reliable and feature-full.","title":"Home"},{"location":"action-commands/","text":"Action Commands If you interact with your 3D printer using its display (touchscreen, LCD, or similar), you may be interested in action commands. Action Commands are messages sent by the printer to OctoPrint when a user performs an action on the printer's display. Standard Action Commands OctoPrint supports several actions out of the box - see here for more details. Proper handling of these commands by Continuous Print is still under development . Your printer firmware must also support action commands for this to work (see Firmware Support for Action Commands below). Custom actions for Continuous Print Currently, the Continuous Print plugin supports a single custom action command: // action:queuego When received from the printer, this message instructs the Continuous Print plugin to start managing the queue - equivalent to clicking \"Start Managing\" on the UI. This command is non-standard and requires additions to firmware - in particular, a custom menu entry must be added in CUSTOM_MENU_MAIN of Configuration_adv.h for Marlin firmware which issues a M118 //action:queuego command. Firmware support for Action Commands Not all printers support Action Commands - it depends on the firmware they're running. The easiest way to know if your printer supports action commands is to watch the Terminal tab in OctoPrint for occurrences of // action:<command> . If these appear e.g. when a print is cancelled from the printer's interface, then it's supported. Adding support for action commands for your printer involves updating the printer's firmware, which is a device-specific process. Check for user-contributed firmwares which include this support - for Marlin-based firmwares for instance, you want to ensure HOST_ACTION_COMMANDS is defined in the firmware (see here ).","title":"Action Commands"},{"location":"action-commands/#action-commands","text":"If you interact with your 3D printer using its display (touchscreen, LCD, or similar), you may be interested in action commands. Action Commands are messages sent by the printer to OctoPrint when a user performs an action on the printer's display.","title":"Action Commands"},{"location":"action-commands/#standard-action-commands","text":"OctoPrint supports several actions out of the box - see here for more details. Proper handling of these commands by Continuous Print is still under development . Your printer firmware must also support action commands for this to work (see Firmware Support for Action Commands below).","title":"Standard Action Commands"},{"location":"action-commands/#custom-actions-for-continuous-print","text":"Currently, the Continuous Print plugin supports a single custom action command: // action:queuego When received from the printer, this message instructs the Continuous Print plugin to start managing the queue - equivalent to clicking \"Start Managing\" on the UI. This command is non-standard and requires additions to firmware - in particular, a custom menu entry must be added in CUSTOM_MENU_MAIN of Configuration_adv.h for Marlin firmware which issues a M118 //action:queuego command.","title":"Custom actions for Continuous Print"},{"location":"action-commands/#firmware-support-for-action-commands","text":"Not all printers support Action Commands - it depends on the firmware they're running. The easiest way to know if your printer supports action commands is to watch the Terminal tab in OctoPrint for occurrences of // action:<command> . If these appear e.g. when a print is cancelled from the printer's interface, then it's supported. Adding support for action commands for your printer involves updating the printer's firmware, which is a device-specific process. Check for user-contributed firmwares which include this support - for Marlin-based firmwares for instance, you want to ensure HOST_ACTION_COMMANDS is defined in the firmware (see here ).","title":"Firmware support for Action Commands"},{"location":"advanced-queuing/","text":"Queuing Basics In the quickstart we covered the basics of adding prints to the queue and running them, but you can do much more once you understand the nested structure of the print queue. Sets and Jobs The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step in the quickstart . Jobs are a collection of sets, printed one or more times. Jobs are always printed sequentially, from the top of the queue to the bottom. Editing Jobs Bring your cursor over a job in the queue, and click the pencil-and-paper icon that appears to begin editing a job. You should see an interface like this: Don't worry if it looks a bit daunting - we'll go over what each number means. The x 2 number at the top tells the queue to print this job two additional times. This is changed from earlier CPQ behavior, where it was a \"total count\". If your job completes and you want to print it one more time, just change this value from 0 to 1. Simple! The complete column shows how many times the Set was printed for this run of the job. It resets to 0 when the job moves on to the next run. The Per Run column is where you indicate the number of times each Set prints per run of the job. The This Run column lets you add one-off prints of a Set without having to adjust the Per Run value. This can be handy when re-running some failed prints not caught by automation, for example. This number decrements down to 0 as prints complete, then \"refills\" back to the Per Run value when the job moves to the next run. The Pending column computes the total number of expected future prints of a Set across all runs of the Job. Use this column to check that the other values are properly configured. The Total Items Printed row at the bottom sums up all the values described above to give a total at the job level. Tip When you start editing a job, CPQ stops considering it for printing. You can edit a job that's currently printing with no problems, but if the print completes while the job is still in \"edit mode\" then the queue will move on to the next printable job. \"Add\" behavior By default, every print file you add (as a Set) is appended to the earliest job being edited. If you want it to be part of a new Job, click the + New Job button, then drag the set into the empty Job that appears. Example 1: Batched strategy Let's consider an empty queue. If you create a job, then add A.gcode with Per Run = 5 and B.gcode with Per Run = 5 , the print order will be: AAAAA BBBBB This is great if you want all of your A files to print before all your B files, for instance when you're working on a project that uses A but plan use B for something later. Example 2: Interleaved strategy Let's start again with an empty queue, but now suppose we add A.gcode with Per Run = 1 , B.gcode with Per Run = 1 , and then set the job count to x 5 . The print order will now be: AB AB AB AB AB This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print. Example 3: Combined strategy From an empty queue, you could even add A.gcode with Per Run = 1 and B.gcode with Per Run = 4 , and set the job count to x 3 . The outcome is then: ABBBB ABBBB ABBBB We're simply mixing examples 1 and 2 together, but this would be ideal for a base print with multiple smaller additions - a table with four legs, for instance. Drag and drop reordering At any time, you can click and drag jobs and sets with the grips on the left (the two vertical lines): Dragging a job reorders it among the jobs in the queue. Dragging a set reorders it within a job. Tip You can also drag a set from one job to another if they are both being edited! However, this can change the total number of that file printed if the destination job has a different count than the origin job.","title":"Queuing Basics"},{"location":"advanced-queuing/#queuing-basics","text":"In the quickstart we covered the basics of adding prints to the queue and running them, but you can do much more once you understand the nested structure of the print queue.","title":"Queuing Basics"},{"location":"advanced-queuing/#sets-and-jobs","text":"The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step in the quickstart . Jobs are a collection of sets, printed one or more times. Jobs are always printed sequentially, from the top of the queue to the bottom.","title":"Sets and Jobs"},{"location":"advanced-queuing/#editing-jobs","text":"Bring your cursor over a job in the queue, and click the pencil-and-paper icon that appears to begin editing a job. You should see an interface like this: Don't worry if it looks a bit daunting - we'll go over what each number means. The x 2 number at the top tells the queue to print this job two additional times. This is changed from earlier CPQ behavior, where it was a \"total count\". If your job completes and you want to print it one more time, just change this value from 0 to 1. Simple! The complete column shows how many times the Set was printed for this run of the job. It resets to 0 when the job moves on to the next run. The Per Run column is where you indicate the number of times each Set prints per run of the job. The This Run column lets you add one-off prints of a Set without having to adjust the Per Run value. This can be handy when re-running some failed prints not caught by automation, for example. This number decrements down to 0 as prints complete, then \"refills\" back to the Per Run value when the job moves to the next run. The Pending column computes the total number of expected future prints of a Set across all runs of the Job. Use this column to check that the other values are properly configured. The Total Items Printed row at the bottom sums up all the values described above to give a total at the job level. Tip When you start editing a job, CPQ stops considering it for printing. You can edit a job that's currently printing with no problems, but if the print completes while the job is still in \"edit mode\" then the queue will move on to the next printable job.","title":"Editing Jobs"},{"location":"advanced-queuing/#add-behavior","text":"By default, every print file you add (as a Set) is appended to the earliest job being edited. If you want it to be part of a new Job, click the + New Job button, then drag the set into the empty Job that appears.","title":"\"Add\" behavior"},{"location":"advanced-queuing/#example-1-batched-strategy","text":"Let's consider an empty queue. If you create a job, then add A.gcode with Per Run = 5 and B.gcode with Per Run = 5 , the print order will be: AAAAA BBBBB This is great if you want all of your A files to print before all your B files, for instance when you're working on a project that uses A but plan use B for something later.","title":"Example 1: Batched strategy"},{"location":"advanced-queuing/#example-2-interleaved-strategy","text":"Let's start again with an empty queue, but now suppose we add A.gcode with Per Run = 1 , B.gcode with Per Run = 1 , and then set the job count to x 5 . The print order will now be: AB AB AB AB AB This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print.","title":"Example 2: Interleaved strategy"},{"location":"advanced-queuing/#example-3-combined-strategy","text":"From an empty queue, you could even add A.gcode with Per Run = 1 and B.gcode with Per Run = 4 , and set the job count to x 3 . The outcome is then: ABBBB ABBBB ABBBB We're simply mixing examples 1 and 2 together, but this would be ideal for a base print with multiple smaller additions - a table with four legs, for instance.","title":"Example 3: Combined strategy"},{"location":"advanced-queuing/#drag-and-drop-reordering","text":"At any time, you can click and drag jobs and sets with the grips on the left (the two vertical lines): Dragging a job reorders it among the jobs in the queue. Dragging a set reorders it within a job. Tip You can also drag a set from one job to another if they are both being edited! However, this can change the total number of that file printed if the destination job has a different count than the origin job.","title":"Drag and drop reordering"},{"location":"api/","text":"API This plugin comes with a basic API to fetch state and start/stop the queue. This allows for other scripts and plugins to interact with the continuous print queue to unlock even more autonomous printing! Important Other internal web requests exist than what's presented here, but they aren't for external use and are not guaranteed to be stable. If you want additional API features, please submit a feature request . Tip: Usage Examples See api_examples/ for reference implementations in different languages. Fetch the queue state Request HTTP GET http://printer:5000/plugin/continuousprint/state/get Returns the current internal state of the printer as a JSON string. List entries within queue may include fields which are not listed here - those fields may be subject to change without notice, so be wary of depending on them. Response { \"active\": true/false, \"status\": string, \"statusType\": string \"profile\": string, \"queues\": [ { \"name\": string, \"strategy\": string, \"jobs\": [ { \"name\": string, \"count\": int, \"remaining\" int, \"draft\": bool, \"acquired\": bool, \"created\" int, \"id\": int, \"sets\": [ { \"path\": string, \"count\": int, \"remaining\": int, \"materials\": [...], \"profiles\": [...], \"sd\": bool }, ... ] }, ... ] }, ... ] } Add a set Request HTTP POST http://printer:5000/plugin/continuousprint/set/add Adds a set, optionally creating an enclosing job if one is not specified. Payload: path: string sd: bool count: int materials: list (optional) profiles: list (optional) job: int (optional ID of job) jobName: string (optional) jobDraft: bool (optional, default True) Response { \"job_id\": int, \"set_\": { // Fields matching set fields in /state/get } Start/stop managing the queue Request HTTP POST http://printer:5000/plugin/continuousprint/set_active Payload: active=true or active=false This starts and stops continuous print management of the printer. Warning If active=false is sent, the plugin will stop managing the queue but it will not stop any currently active print . This must be done separately. See the OctoPrint REST API for additional print job management options which include cancelling active prints. Response Same as /state above","title":"API"},{"location":"api/#api","text":"This plugin comes with a basic API to fetch state and start/stop the queue. This allows for other scripts and plugins to interact with the continuous print queue to unlock even more autonomous printing! Important Other internal web requests exist than what's presented here, but they aren't for external use and are not guaranteed to be stable. If you want additional API features, please submit a feature request . Tip: Usage Examples See api_examples/ for reference implementations in different languages.","title":"API"},{"location":"api/#fetch-the-queue-state","text":"Request HTTP GET http://printer:5000/plugin/continuousprint/state/get Returns the current internal state of the printer as a JSON string. List entries within queue may include fields which are not listed here - those fields may be subject to change without notice, so be wary of depending on them. Response { \"active\": true/false, \"status\": string, \"statusType\": string \"profile\": string, \"queues\": [ { \"name\": string, \"strategy\": string, \"jobs\": [ { \"name\": string, \"count\": int, \"remaining\" int, \"draft\": bool, \"acquired\": bool, \"created\" int, \"id\": int, \"sets\": [ { \"path\": string, \"count\": int, \"remaining\": int, \"materials\": [...], \"profiles\": [...], \"sd\": bool }, ... ] }, ... ] }, ... ] }","title":"Fetch the queue state"},{"location":"api/#add-a-set","text":"Request HTTP POST http://printer:5000/plugin/continuousprint/set/add Adds a set, optionally creating an enclosing job if one is not specified. Payload: path: string sd: bool count: int materials: list (optional) profiles: list (optional) job: int (optional ID of job) jobName: string (optional) jobDraft: bool (optional, default True) Response { \"job_id\": int, \"set_\": { // Fields matching set fields in /state/get }","title":"Add a set"},{"location":"api/#startstop-managing-the-queue","text":"Request HTTP POST http://printer:5000/plugin/continuousprint/set_active Payload: active=true or active=false This starts and stops continuous print management of the printer. Warning If active=false is sent, the plugin will stop managing the queue but it will not stop any currently active print . This must be done separately. See the OctoPrint REST API for additional print job management options which include cancelling active prints. Response Same as /state above","title":"Start/stop managing the queue"},{"location":"contributing/","text":"Contributing Follow these steps if you'd like to set up a development environment for contributing changes back to Continuous Print. If you just want to run the plugin, see Getting Started . This guide is based on the octoprint plugin quickstart guide Docker setup Docker is a tool that allows you to run processes in isolated containers. A docker setup is included with CPQ for development purposes, meaning you don't have to install anything (other than Docker) on your computer in order to get up and running. Install Docker on your computer, then read on to learn how to start developing with CPQ. Note If you prefer to not use docker, proceed to \"Manual setup\" below. First, download the repository (you could alternately fork and use your own repository here, for easier contributing later): git clone https://github.com/smartin015/continuousprint.git Then start a new container using docker-compose (this is installed by default in most Docker installations, but check here if the command isn't found): docker-compose run --service-ports dev1 /bin/bash The container will start with the repo volume-mounted at /home/oprint/continuousprint . Register the plugin in dev mode so that live edits can be made: cd ~/continuousprint && octoprint dev plugin:install Then start the server: octoprint serve You can now visit it at http://localhost:5000 . Manual setup Read on to learn how to set up a development environment on your machine, without using Docker. 1. Install octoprint from source Install octoprint locally: git clone https://github.com/OctoPrint/OctoPrint cd OctoPrint virtualenv venv source venv/bin/activate pip install -e . 2. Install dev tools Important Perform this step in a different terminal - NOT using the venv we set up for OctoPrint. The dev dependencies are known to conflict with OctoPrint's dependencies and can break your OctoPrint installation. It is recommended to fork this repository so that it's easier to submit your changes back to the main repo later (see \"Submit a pull request\" below). git clone https://github.com/smartin015/continuousprint.git cd continuousprint pip install -r dev-dependencies.txt pre-commit install You can verify good installation by running pre-commit run --all-files . If everything passes, you're good to go. 2. Install and start the continuous print plugin in local dev mode In the same terminal as the one where you activated the environment (see step 1), install the plugin in dev mode and launch the server: cd ../continuousprint octoprint dev plugin:install octoprint serve You should see \"Successfully installed continuousprint\" when running the install command, and you can view the page at http://localhost:5000 . Optional steps for easier development A couple of optional changes can improve your developer flow: YAML configs Edit OctoPrint's yaml config to turn off minification and ignore startup errors (at continuousprint/volume/config.yaml in the Docker container, else in your OctoPrint install path): server: ignoreIncompleteStartup: true devel: webassets: bundle: false minify: false minify_plugins: false Turning off minification in particular will help when chasing down error messages - without this change, client-side errors become garbled and hard to root-cause. Debug logging Enable debug-level messages from ContinuousPrint by going into Settings > Logging and adding octoprint.plugins.continuousprint at DEBUG level at the bottom of that page. Click Save and the log level will be updated. Editing docs Continuous Print uses mkdocs to generate web documentation. All documentation lives in docs/ . pip install mkdocs mkdocs-material if you installed the dev tools (step 2) you can run mkdocs serve from the root of the repository to see doc edits live at http://localhost:8000 . 3. Run unit tests to verify changes When you've made your changes, it's important to test for regressions. Run python tests with this command: python3 -m unittest *_test.py Frontend unit tests require some additional setup (make sure yarn and its dependencies are installed): cd .../continuousprint yarn install yarn run test This will run all frontend JS test files ( continuousprint/static/js/\\*.test.js ). You can also yarn run watch-test to set up a test process which re-runs whenever you save a JS test file. 4. Install a dev version on OctoPi Users of OctoPi can install a development version directly on their pi to test their changes on actual hardware. Warning Editing code - especially unfamiliar code - can lead to unpredictable behavior. You're controlling a robot that can pinch fingers and melt plastic, so be careful and consider using the built-in virtual printer before a physical test. ssh pi@<your octopi hostname> and provide your password (the default is raspberry , but for security reasons you should change it with passwd when you can) git clone https://github.com/smartin015/continuousprint.git Uninstall any existing continuous print installations (see Settings -> Plugin Manager in the browser) cd continuousprint && ~/oprint/bin/python3 setup.py install Note that we're using the bundled version of python3 that comes with octoprint, NOT the system installed python3. If you try the latter, it'll give an error that sounds like octoprint isn't installed. 5. Submit a pull request When you've made and tested your changes, follow the remaining instructions for contributing to projects to create a pull request. Important New pull requests must be submitted to the rc branch, not to the master branch . Additonally, the plugin version line in setup.py must have an incremented rc number (e.g. 1.5.0rc2 -> 1.5.0rc3 , 1.6.1 -> 1.6.2rc1 ). This allows users to test the \"release candidate\" and shake out any bugs before everyone receives the change. You should receive a review within a day or so - if you haven't heard back in a week or more, email the plugin author . Tips and Tricks This is a collection of random tidbits intended to help you get your bearings. The backend ( __init__.py and dependencies) stores a flattened representation of the print queue and iterates through it from beginning to end. Each item is loaded as a QueueItem (see print_queue.py ). The frontend talks to the backend with the flattened queue, but operates on an inmemory structured version: Each flattened queue item is loaded as a CPQueueItem (see continuousprint/static/js/continuousprint_queueitem.js) Sets of the same queue item are aggregated into a CPQueueSet (see continuousprint/static/js/continuousprint_queueset.js) Multiple queuesets are grouped together and run one or more times as a CPJob (see continuousprint/static/js/continuousprint_job.js) For simplicity, each level only understands the level below it - e.g. a Job doesn't care about QueueItems. Octoprint currently uses https://fontawesome.com/v5.15/icons/ for icons. Drag-and-drop functionality uses SortableJS wrapped with Knockout-SortableJS, both of which are heavily customized. For more details on changes see: Applied fix from https://github.com/SortableJS/knockout-sortablejs/pull/13 Applied fix from https://github.com/SortableJS/knockout-sortablejs/issues/14 Discussion at https://github.com/smartin015/continuousprint/issues/14 (conflict with a different knockout-sortable library)","title":"Contributing"},{"location":"contributing/#contributing","text":"Follow these steps if you'd like to set up a development environment for contributing changes back to Continuous Print. If you just want to run the plugin, see Getting Started . This guide is based on the octoprint plugin quickstart guide","title":"Contributing"},{"location":"contributing/#docker-setup","text":"Docker is a tool that allows you to run processes in isolated containers. A docker setup is included with CPQ for development purposes, meaning you don't have to install anything (other than Docker) on your computer in order to get up and running. Install Docker on your computer, then read on to learn how to start developing with CPQ. Note If you prefer to not use docker, proceed to \"Manual setup\" below. First, download the repository (you could alternately fork and use your own repository here, for easier contributing later): git clone https://github.com/smartin015/continuousprint.git Then start a new container using docker-compose (this is installed by default in most Docker installations, but check here if the command isn't found): docker-compose run --service-ports dev1 /bin/bash The container will start with the repo volume-mounted at /home/oprint/continuousprint . Register the plugin in dev mode so that live edits can be made: cd ~/continuousprint && octoprint dev plugin:install Then start the server: octoprint serve You can now visit it at http://localhost:5000 .","title":"Docker setup"},{"location":"contributing/#manual-setup","text":"Read on to learn how to set up a development environment on your machine, without using Docker.","title":"Manual setup"},{"location":"contributing/#1-install-octoprint-from-source","text":"Install octoprint locally: git clone https://github.com/OctoPrint/OctoPrint cd OctoPrint virtualenv venv source venv/bin/activate pip install -e .","title":"1. Install octoprint from source"},{"location":"contributing/#2-install-dev-tools","text":"Important Perform this step in a different terminal - NOT using the venv we set up for OctoPrint. The dev dependencies are known to conflict with OctoPrint's dependencies and can break your OctoPrint installation. It is recommended to fork this repository so that it's easier to submit your changes back to the main repo later (see \"Submit a pull request\" below). git clone https://github.com/smartin015/continuousprint.git cd continuousprint pip install -r dev-dependencies.txt pre-commit install You can verify good installation by running pre-commit run --all-files . If everything passes, you're good to go.","title":"2. Install dev tools"},{"location":"contributing/#2-install-and-start-the-continuous-print-plugin-in-local-dev-mode","text":"In the same terminal as the one where you activated the environment (see step 1), install the plugin in dev mode and launch the server: cd ../continuousprint octoprint dev plugin:install octoprint serve You should see \"Successfully installed continuousprint\" when running the install command, and you can view the page at http://localhost:5000 .","title":"2. Install and start the continuous print plugin in local dev mode"},{"location":"contributing/#optional-steps-for-easier-development","text":"A couple of optional changes can improve your developer flow:","title":"Optional steps for easier development"},{"location":"contributing/#yaml-configs","text":"Edit OctoPrint's yaml config to turn off minification and ignore startup errors (at continuousprint/volume/config.yaml in the Docker container, else in your OctoPrint install path): server: ignoreIncompleteStartup: true devel: webassets: bundle: false minify: false minify_plugins: false Turning off minification in particular will help when chasing down error messages - without this change, client-side errors become garbled and hard to root-cause.","title":"YAML configs"},{"location":"contributing/#debug-logging","text":"Enable debug-level messages from ContinuousPrint by going into Settings > Logging and adding octoprint.plugins.continuousprint at DEBUG level at the bottom of that page. Click Save and the log level will be updated.","title":"Debug logging"},{"location":"contributing/#editing-docs","text":"Continuous Print uses mkdocs to generate web documentation. All documentation lives in docs/ . pip install mkdocs mkdocs-material if you installed the dev tools (step 2) you can run mkdocs serve from the root of the repository to see doc edits live at http://localhost:8000 .","title":"Editing docs"},{"location":"contributing/#3-run-unit-tests-to-verify-changes","text":"When you've made your changes, it's important to test for regressions. Run python tests with this command: python3 -m unittest *_test.py Frontend unit tests require some additional setup (make sure yarn and its dependencies are installed): cd .../continuousprint yarn install yarn run test This will run all frontend JS test files ( continuousprint/static/js/\\*.test.js ). You can also yarn run watch-test to set up a test process which re-runs whenever you save a JS test file.","title":"3. Run unit tests to verify changes"},{"location":"contributing/#4-install-a-dev-version-on-octopi","text":"Users of OctoPi can install a development version directly on their pi to test their changes on actual hardware. Warning Editing code - especially unfamiliar code - can lead to unpredictable behavior. You're controlling a robot that can pinch fingers and melt plastic, so be careful and consider using the built-in virtual printer before a physical test. ssh pi@<your octopi hostname> and provide your password (the default is raspberry , but for security reasons you should change it with passwd when you can) git clone https://github.com/smartin015/continuousprint.git Uninstall any existing continuous print installations (see Settings -> Plugin Manager in the browser) cd continuousprint && ~/oprint/bin/python3 setup.py install Note that we're using the bundled version of python3 that comes with octoprint, NOT the system installed python3. If you try the latter, it'll give an error that sounds like octoprint isn't installed.","title":"4. Install a dev version on OctoPi"},{"location":"contributing/#5-submit-a-pull-request","text":"When you've made and tested your changes, follow the remaining instructions for contributing to projects to create a pull request. Important New pull requests must be submitted to the rc branch, not to the master branch . Additonally, the plugin version line in setup.py must have an incremented rc number (e.g. 1.5.0rc2 -> 1.5.0rc3 , 1.6.1 -> 1.6.2rc1 ). This allows users to test the \"release candidate\" and shake out any bugs before everyone receives the change. You should receive a review within a day or so - if you haven't heard back in a week or more, email the plugin author .","title":"5. Submit a pull request"},{"location":"contributing/#tips-and-tricks","text":"This is a collection of random tidbits intended to help you get your bearings. The backend ( __init__.py and dependencies) stores a flattened representation of the print queue and iterates through it from beginning to end. Each item is loaded as a QueueItem (see print_queue.py ). The frontend talks to the backend with the flattened queue, but operates on an inmemory structured version: Each flattened queue item is loaded as a CPQueueItem (see continuousprint/static/js/continuousprint_queueitem.js) Sets of the same queue item are aggregated into a CPQueueSet (see continuousprint/static/js/continuousprint_queueset.js) Multiple queuesets are grouped together and run one or more times as a CPJob (see continuousprint/static/js/continuousprint_job.js) For simplicity, each level only understands the level below it - e.g. a Job doesn't care about QueueItems. Octoprint currently uses https://fontawesome.com/v5.15/icons/ for icons. Drag-and-drop functionality uses SortableJS wrapped with Knockout-SortableJS, both of which are heavily customized. For more details on changes see: Applied fix from https://github.com/SortableJS/knockout-sortablejs/pull/13 Applied fix from https://github.com/SortableJS/knockout-sortablejs/issues/14 Discussion at https://github.com/smartin015/continuousprint/issues/14 (conflict with a different knockout-sortable library)","title":"Tips and Tricks"},{"location":"custom-events/","text":"Custom Events Continuous Print exposes internal events that can be used by other OctoPrint plugins to trigger additional actions. List of Events See continuousprint/data/__init__.py CustomEvents class for the current list of events and their string identifiers. continuousprint_start_print This event fires whenever a new print is stated from a queue. This event does not fire for bed clearing, finishing, or other event-driven scripts. continuousprint_cooldown This event fires when the Managed Bed Cooldown setting is enabled and the cooldown state is entered. It is not fired if managed bed cooldown is not enabled. continuousprint_clear_bed This event fires when the bed clearing script is executed. continuousprint_finish This event fires when the finishing script is executed. continuousprint_cancel This event is fired when the current print is cancelled by Continuous Print, e.g. when spaghetti has been detected. Example: OctoPrint-IFTTT OctoPrint-IFTTT is an example of a plugin that performs actions based on events. Custom events (e.g. continuousprint_clear_bed ) go in the Event Name column of the settings page.","title":"Custom Events"},{"location":"custom-events/#custom-events","text":"Continuous Print exposes internal events that can be used by other OctoPrint plugins to trigger additional actions.","title":"Custom Events"},{"location":"custom-events/#list-of-events","text":"See continuousprint/data/__init__.py CustomEvents class for the current list of events and their string identifiers. continuousprint_start_print This event fires whenever a new print is stated from a queue. This event does not fire for bed clearing, finishing, or other event-driven scripts. continuousprint_cooldown This event fires when the Managed Bed Cooldown setting is enabled and the cooldown state is entered. It is not fired if managed bed cooldown is not enabled. continuousprint_clear_bed This event fires when the bed clearing script is executed. continuousprint_finish This event fires when the finishing script is executed. continuousprint_cancel This event is fired when the current print is cancelled by Continuous Print, e.g. when spaghetti has been detected.","title":"List of Events"},{"location":"custom-events/#example-octoprint-ifttt","text":"OctoPrint-IFTTT is an example of a plugin that performs actions based on events. Custom events (e.g. continuousprint_clear_bed ) go in the Event Name column of the settings page.","title":"Example: OctoPrint-IFTTT"},{"location":"failure-recovery/","text":"Failure Recovery Failure recovery lets your printer use Obico to retry prints when they start to fail. Sometimes, printers don't do what they're told. Follow the steps in this guide to help Continuous Print recover from unexpected printing behavior. Spaghetti Detection and Recovery By default, the print queue doesn't know whether your print is proceeding fine or spraying filament everywhere (\"spaghettification\"). Follow The Obico installation instructions on your octoprint installation, then restart OctoPrint. Continuous Print will automatically detect that TSD is installed and will enable queue recovery when spaghetti is detected (TSD plugin must be v1.8.11 or higher). When TSD thinks the print is failing: Continuous Print checks how long the current print has been running. If the failure was detected late into the print, the queue will pause and wait for user input. Otherwise, it looks to see how many time this specific print has been attempted. If it's been tried too many times, the queue pauses and waits for user input. Otherwise, run the failure clearing script and try the print again. In the case of #1, TSD can cause false-positives, so this saves print time and filament even if it's a bit more manual. For #2, either the printer isn't adhesive enough or the print itself is at fault. Further development may improve behavior here, e.g. attempting the next print in the queue before giving up in case the print itself is at fault. Configuration By going to Settings -> Continuous Print and scrolling down to \"Failure Recovery\", you can adjust: The amount of time a print can run before Continuous Print pauses the qeueue on failure The number of allowed retries before stopping the queue","title":"Failure Recovery"},{"location":"failure-recovery/#failure-recovery","text":"Failure recovery lets your printer use Obico to retry prints when they start to fail. Sometimes, printers don't do what they're told. Follow the steps in this guide to help Continuous Print recover from unexpected printing behavior.","title":"Failure Recovery"},{"location":"failure-recovery/#spaghetti-detection-and-recovery","text":"By default, the print queue doesn't know whether your print is proceeding fine or spraying filament everywhere (\"spaghettification\"). Follow The Obico installation instructions on your octoprint installation, then restart OctoPrint. Continuous Print will automatically detect that TSD is installed and will enable queue recovery when spaghetti is detected (TSD plugin must be v1.8.11 or higher). When TSD thinks the print is failing: Continuous Print checks how long the current print has been running. If the failure was detected late into the print, the queue will pause and wait for user input. Otherwise, it looks to see how many time this specific print has been attempted. If it's been tried too many times, the queue pauses and waits for user input. Otherwise, run the failure clearing script and try the print again. In the case of #1, TSD can cause false-positives, so this saves print time and filament even if it's a bit more manual. For #2, either the printer isn't adhesive enough or the print itself is at fault. Further development may improve behavior here, e.g. attempting the next print in the queue before giving up in case the print itself is at fault.","title":"Spaghetti Detection and Recovery"},{"location":"failure-recovery/#configuration","text":"By going to Settings -> Continuous Print and scrolling down to \"Failure Recovery\", you can adjust: The amount of time a print can run before Continuous Print pauses the qeueue on failure The number of allowed retries before stopping the queue","title":"Configuration"},{"location":"gcode-scripting/","text":"GCODE Scripting GCODE scripts can be quite complex - if you want to learn the basics, try reading through this primer . Bed clearing script When Continuous Print is managing the queue, this script is run after every print completes - including prints started before queue managing begins . Your cleaning script should remove all 3D print material from the build area to make way for the next print. Optional: Use BedReady to check bed state OctoPrint-BedReady is a plugin that checks the webcam image of the bed against a refrence image where the bed is clear. If you install BedReady, you can add an automated check that the bed is clear for the next print by adding @BEDREADY onto the end of your bed clearing script. Queue finished script This script is run after all prints in the queue have been printed. Use this script to put the machine in a safe resting state. Note that the last print will have already been cleared by the bed cleaning script (above). Contributing When you come up with a useful script for e.g. clearing the print bed, consider contributing it back to the community! Visit the repository and click the \"Fork\" button on the top right to create a fork. Go to printer_profiles.yaml and check to see if your printer make and model are present. If they aren't, click the pencil icon on the top right of the file to begin editing. When you're done adding details, save it to a new branch of your fork. Now go to gcode_scripts.yaml and edit it in the same way, adding your gcode and any additional fields. Save your changes - to a new branch if you didn't have to do anything on step 2, otherwise to the same branch you created earlier. Check one last time that the script names match those provided in your printer profiles defaults section, then submit a pull request. Make sure to do a PR against the rc branch, NOT the master branch.","title":"GCODE Scripting"},{"location":"gcode-scripting/#gcode-scripting","text":"GCODE scripts can be quite complex - if you want to learn the basics, try reading through this primer .","title":"GCODE Scripting"},{"location":"gcode-scripting/#bed-clearing-script","text":"When Continuous Print is managing the queue, this script is run after every print completes - including prints started before queue managing begins . Your cleaning script should remove all 3D print material from the build area to make way for the next print.","title":"Bed clearing script"},{"location":"gcode-scripting/#optional-use-bedready-to-check-bed-state","text":"OctoPrint-BedReady is a plugin that checks the webcam image of the bed against a refrence image where the bed is clear. If you install BedReady, you can add an automated check that the bed is clear for the next print by adding @BEDREADY onto the end of your bed clearing script.","title":"Optional: Use BedReady to check bed state"},{"location":"gcode-scripting/#queue-finished-script","text":"This script is run after all prints in the queue have been printed. Use this script to put the machine in a safe resting state. Note that the last print will have already been cleared by the bed cleaning script (above).","title":"Queue finished script"},{"location":"gcode-scripting/#contributing","text":"When you come up with a useful script for e.g. clearing the print bed, consider contributing it back to the community! Visit the repository and click the \"Fork\" button on the top right to create a fork. Go to printer_profiles.yaml and check to see if your printer make and model are present. If they aren't, click the pencil icon on the top right of the file to begin editing. When you're done adding details, save it to a new branch of your fork. Now go to gcode_scripts.yaml and edit it in the same way, adding your gcode and any additional fields. Save your changes - to a new branch if you didn't have to do anything on step 2, otherwise to the same branch you created earlier. Check one last time that the script names match those provided in your printer profiles defaults section, then submit a pull request. Make sure to do a PR against the rc branch, NOT the master branch.","title":"Contributing"},{"location":"getting-started/","text":"Getting Started Install the plugin In the OctoPrint UI, go to Settings -> Plugin Manager -> Get More Search for \"Continuous Print\", and click Install, following any instructions If you can't find the plugin, you can also put https://github.com/smartin015/continuousprint/archive/master.zip into the \"...from URL\" section of the Get More page. Restart OctoPrint That's it! Now let's configure it to work with your printer. Want cool features? There's much more automation on the way ! To help speed up development and get features early (and if you don't mind the odd bug here and there), turn on Release Candidates under Settings -> Software Update (more info here ) Configure the plugin Go to Settings -> Continuous Print and ensure the bed cleaning and queue finished scripts are correct for your 3D printer. If you select your printer's make and model from the settings drop down, default scripts will be automatically configured. If you want to add a missing printer to the list or improve on the default script, see the GCODE Scripting contributing section Add prints to the queue Navigate to the file you wish to add in the Files dialog on the left of the page. Add it to the print queue by clicking the + button to the right of the file name. If you want to print more than one copy, you can click the plus button multiple times or set a specific count in the Continuous Print tab. Push \"Save\" to save your print job and make it available for printing. Tip See Queueing Basics to learn more about how to group your prints into sets and jobs. Start the queue The print queue is initially inactive when Octoprint is started. To run the queue: Click the 'Continuous Print` tab (it may be hidden in the extra tabs fold-out on the right) Double check the order and count of your prints - set the count and order using the buttons and number box to the right of the queued print, and delete with the red X . Click Start Managing . The plugin will wait until your printer is ready to start a print, then it'll begin with the top of the queue and proceed until the bottom. Note that the default scripts for most printers will pause after every print to wait for you to remove the printed part - to keep printing, just press the \"Resume\" button on the OctoPrint UI. You can learn more about how to configure the gcode scripts here if you want to further automate your printing. Inspect finished prints As the print queue is managed and prints complete, you can see the status of individual prints by clicking on the \"History\" tab in the plugin tab window. If timelapses are configured for your printer, completed prints will be tagged with an icon you can hover / click to view the timelapse for that print run. The progress bar on particular prints and jobs will also fill in as prints complete in the \"Queues\" tab. Stop the queue When all prints are finished, the plugin goes idle and waits for additional work. If you need to stop the queue early, click Stop Managing . Important The queue may not be managed any more, but any currently running print will continue printing unless you cancel it with the Cancel button. Clean up the queue You can delete completed print jobs by selecting them (using the check box on the left) and pressing the trash can icon. This will remove the entry from the queue, but your .gcode files that are referenced in the job will remain unchanged. Troubleshooting If at any point you're stuck or see unexpected behavior or bugs, please file a bug report . Be sure to include system info and browser logs so the problem can be quickly diagnosed and fixed.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-the-plugin","text":"In the OctoPrint UI, go to Settings -> Plugin Manager -> Get More Search for \"Continuous Print\", and click Install, following any instructions If you can't find the plugin, you can also put https://github.com/smartin015/continuousprint/archive/master.zip into the \"...from URL\" section of the Get More page. Restart OctoPrint That's it! Now let's configure it to work with your printer. Want cool features? There's much more automation on the way ! To help speed up development and get features early (and if you don't mind the odd bug here and there), turn on Release Candidates under Settings -> Software Update (more info here )","title":"Install the plugin"},{"location":"getting-started/#configure-the-plugin","text":"Go to Settings -> Continuous Print and ensure the bed cleaning and queue finished scripts are correct for your 3D printer. If you select your printer's make and model from the settings drop down, default scripts will be automatically configured. If you want to add a missing printer to the list or improve on the default script, see the GCODE Scripting contributing section","title":"Configure the plugin"},{"location":"getting-started/#add-prints-to-the-queue","text":"Navigate to the file you wish to add in the Files dialog on the left of the page. Add it to the print queue by clicking the + button to the right of the file name. If you want to print more than one copy, you can click the plus button multiple times or set a specific count in the Continuous Print tab. Push \"Save\" to save your print job and make it available for printing. Tip See Queueing Basics to learn more about how to group your prints into sets and jobs.","title":"Add prints to the queue"},{"location":"getting-started/#start-the-queue","text":"The print queue is initially inactive when Octoprint is started. To run the queue: Click the 'Continuous Print` tab (it may be hidden in the extra tabs fold-out on the right) Double check the order and count of your prints - set the count and order using the buttons and number box to the right of the queued print, and delete with the red X . Click Start Managing . The plugin will wait until your printer is ready to start a print, then it'll begin with the top of the queue and proceed until the bottom. Note that the default scripts for most printers will pause after every print to wait for you to remove the printed part - to keep printing, just press the \"Resume\" button on the OctoPrint UI. You can learn more about how to configure the gcode scripts here if you want to further automate your printing.","title":"Start the queue"},{"location":"getting-started/#inspect-finished-prints","text":"As the print queue is managed and prints complete, you can see the status of individual prints by clicking on the \"History\" tab in the plugin tab window. If timelapses are configured for your printer, completed prints will be tagged with an icon you can hover / click to view the timelapse for that print run. The progress bar on particular prints and jobs will also fill in as prints complete in the \"Queues\" tab.","title":"Inspect finished prints"},{"location":"getting-started/#stop-the-queue","text":"When all prints are finished, the plugin goes idle and waits for additional work. If you need to stop the queue early, click Stop Managing . Important The queue may not be managed any more, but any currently running print will continue printing unless you cancel it with the Cancel button.","title":"Stop the queue"},{"location":"getting-started/#clean-up-the-queue","text":"You can delete completed print jobs by selecting them (using the check box on the left) and pressing the trash can icon. This will remove the entry from the queue, but your .gcode files that are referenced in the job will remain unchanged.","title":"Clean up the queue"},{"location":"getting-started/#troubleshooting","text":"If at any point you're stuck or see unexpected behavior or bugs, please file a bug report . Be sure to include system info and browser logs so the problem can be quickly diagnosed and fixed.","title":"Troubleshooting"},{"location":"job-files/","text":"Job Files .gjob files store everything that a printer needs to print a Continuous Print job . Why create a new file type? 3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). Similarly, GCODE doesn't allow for quickly changing the number and type of objects which are printed - which is something Continuous Print does as a base feature. Other metadata (like material types and printer profile supported by the GCODE file) are also non-standard and stored in a slicer-specific way, if at all. For these reasons, it becomes useful to define the .gjob file type. Creating a .gjob file Click the check box next to one or more Jobs in the Queues tab to select them. Click the save (floppy disk) icon that appears at the top of the queue to save to .gjob . All saved .gjob files will appear in the Files panel on the left. Loading a .gjob file To load a .gjob file, click the + button next to a .gjob file in the Files panel. The job will be inserted at the bottom of the queue in an edit mode - make any desired changes, then hit Save. Technical Details Under the hood, a .gjob is really just a .zip file containing the various .gcode files, plus a manifest.json file which describes how to print them. If you're interested in learning more about how these jobs are built, see the PeerPrint implementation","title":"Job Files"},{"location":"job-files/#job-files","text":".gjob files store everything that a printer needs to print a Continuous Print job . Why create a new file type? 3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). Similarly, GCODE doesn't allow for quickly changing the number and type of objects which are printed - which is something Continuous Print does as a base feature. Other metadata (like material types and printer profile supported by the GCODE file) are also non-standard and stored in a slicer-specific way, if at all. For these reasons, it becomes useful to define the .gjob file type.","title":"Job Files"},{"location":"job-files/#creating-a-gjob-file","text":"Click the check box next to one or more Jobs in the Queues tab to select them. Click the save (floppy disk) icon that appears at the top of the queue to save to .gjob . All saved .gjob files will appear in the Files panel on the left.","title":"Creating a .gjob file"},{"location":"job-files/#loading-a-gjob-file","text":"To load a .gjob file, click the + button next to a .gjob file in the Files panel. The job will be inserted at the bottom of the queue in an edit mode - make any desired changes, then hit Save.","title":"Loading a .gjob file"},{"location":"job-files/#technical-details","text":"Under the hood, a .gjob is really just a .zip file containing the various .gcode files, plus a manifest.json file which describes how to print them. If you're interested in learning more about how these jobs are built, see the PeerPrint implementation","title":"Technical Details"},{"location":"lan-queues/","text":"LAN Queues A LAN queue is a local network queue that multiple 3D printers print from. It's not unusual to have multiple 3D printers - in home workshops, in the prototyping industry, and even for 3D printing services (e.g. Shapeways) and manufacturers that manage hundreds/thousands of them. In addition to providing a local queue by default, Continuous Print also configures a default LAN queue that will automatically link any other printers on your local network. Printers can then coordinate together over the network to print jobs from the same queue. Warning LAN queues are intended for trusted, local (LAN) networks only - not for cross-network (WAN) use cases. Using LAN queues across networks is insecure and strongly discouraged. Info If you upgraded from v2.0.0 or earlier , the default LAN queue will not be added (a compatibility measure). If you don't see the default LAN queue, please read and follow Additional LAN Queues for instructions on how to set up your own. Setup By default, Continuous Print creates a queue called \"LAN\" that printers on the network will automatically join. You will need a working instance of OctoPrint (with the Continuous Print plugin installed) for every printer you wish to have join the queue. See what printers are connected to the queue by hovering your mouse over the queue name: If printers are missing from this list, make sure they have OctoPrint and Continous Print installed and enabled, and that they are on the same local network. See Additional LAN Queues below if you need more advanced LAN queue configuration. Submit a job Submitting a job is as simple as dragging it from the \"local\" queue to your LAN queue. After confirming that you wish to submit your job, the job will be moved out of the local queue and into the LAN queue. Undo job submission Submission can be undone simply by dragging the job back to the \"local\" queue. This can be done by any printer in the LAN queue. Info The printer receiving the local job may not have the local .gcode files initially, so the files are fetched and copied to ContinuousPrint/imports/<job name>/ and the Set paths are auto-updated accordingly. Edit a LAN queue job You can edit jobs in LAN queues just as in Local queues - see Queuing Basics for more details. Cancel a LAN queue job Click the checkbox next to the job in your LAN queue. Click the trash can icon that appears. The job will disappear from the LAN queue and no longer be printed. Note that a job cannot be deleted if a printer is actively printing it. Details LAN Queues manage Jobs, not Sets/Files Queues operate at the level of a Job (see Sets and Jobs for disambiguation). All work described by the job will be completed by the printer which acquires it. In other words, the work within a job will not be distributed across printers . This is to ensure compatability with future work to support WAN / decentralized network printing, ensuring that all prints of any job are guaranteed to end up in the same physical location. Queue Strategies When a printer is done with its job, it will choose the next one based on whichever strategy is configured for the queue it's printing from. There is currently only one strategy: In-Order prints linearly down the queue from top to bottom, one job at a time. In the future, you will be able to customize how your printer works on the queue, e.g. choosing jobs in a way which avoids excessive filament changes and other manual actions. The overall strategy between queues is currently in-order, i.e. all prints in the topmost queue will be executed before moving onto the next queue, and so on. This will eventually change to allow a top-level strategy which dictates which queue to print from. GCODE Limitations 3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). This can be mitigated in one of two ways: Use exactly the same make and model of printer for all members of the LAN queue Configure the correct profiles for all Sets so that each type of printer has its own compatible *.gcode files to fully print the job. Info For users of Kiri:Moto slicer , the second mitigation is automatic: gcode files are automatically analyzed and the printer profile applied when they are added to the queue. See the Printer Profiles page for more details. Additional LAN Queues It's straightforward to add additional LAN queues, or remove/modify the default LAN queue if desired: Open OctoPrint's settings page Click through to Continuous Print Click the Queues button to go to the queue settings page. Click the \"Add Queue\" button to add a new LAN queue. Fill in the inputs, but keep in mind: Each queue must have a unique name (which cannot be local and archive - these are reserved) Address:Port must be either set to auto or have the form of ip_address:port (e.g. 192.168.1.43:6789 ) A hostname of localhost will only connect to other OctoPrint instances on the same host. If you're unsure what to specify here, try 0.0.0.0 which binds to all IP addresses on the host . If auto is used, an IP address and port will be selected automatically - this will probably work, but may not be correct for more complicated network setups. Access control may be a factor if you're using a port number below 1024 (see privileged ports ) You may experience silent failures if you specify a port that's already in use by another process. All LAN queues are only visible to other devices on the same network, unless you've taken steps to expose ports (NOT recommended). When you've finished configuring your queues, click Save . If everything is working properly, you'll see the changes reflected in the queues on the Continuous Print tab with the queue(s) you added. It will show no other peers connected to it, but that's because we still have to set them up. Complete steps 1-6 for all remaining printers, and you should see them as peers when you look at the header of the queue.","title":"LAN Queues"},{"location":"lan-queues/#lan-queues","text":"A LAN queue is a local network queue that multiple 3D printers print from. It's not unusual to have multiple 3D printers - in home workshops, in the prototyping industry, and even for 3D printing services (e.g. Shapeways) and manufacturers that manage hundreds/thousands of them. In addition to providing a local queue by default, Continuous Print also configures a default LAN queue that will automatically link any other printers on your local network. Printers can then coordinate together over the network to print jobs from the same queue. Warning LAN queues are intended for trusted, local (LAN) networks only - not for cross-network (WAN) use cases. Using LAN queues across networks is insecure and strongly discouraged. Info If you upgraded from v2.0.0 or earlier , the default LAN queue will not be added (a compatibility measure). If you don't see the default LAN queue, please read and follow Additional LAN Queues for instructions on how to set up your own.","title":"LAN Queues"},{"location":"lan-queues/#setup","text":"By default, Continuous Print creates a queue called \"LAN\" that printers on the network will automatically join. You will need a working instance of OctoPrint (with the Continuous Print plugin installed) for every printer you wish to have join the queue. See what printers are connected to the queue by hovering your mouse over the queue name: If printers are missing from this list, make sure they have OctoPrint and Continous Print installed and enabled, and that they are on the same local network. See Additional LAN Queues below if you need more advanced LAN queue configuration.","title":"Setup"},{"location":"lan-queues/#submit-a-job","text":"Submitting a job is as simple as dragging it from the \"local\" queue to your LAN queue. After confirming that you wish to submit your job, the job will be moved out of the local queue and into the LAN queue.","title":"Submit a job"},{"location":"lan-queues/#undo-job-submission","text":"Submission can be undone simply by dragging the job back to the \"local\" queue. This can be done by any printer in the LAN queue. Info The printer receiving the local job may not have the local .gcode files initially, so the files are fetched and copied to ContinuousPrint/imports/<job name>/ and the Set paths are auto-updated accordingly.","title":"Undo job submission"},{"location":"lan-queues/#edit-a-lan-queue-job","text":"You can edit jobs in LAN queues just as in Local queues - see Queuing Basics for more details.","title":"Edit a LAN queue job"},{"location":"lan-queues/#cancel-a-lan-queue-job","text":"Click the checkbox next to the job in your LAN queue. Click the trash can icon that appears. The job will disappear from the LAN queue and no longer be printed. Note that a job cannot be deleted if a printer is actively printing it.","title":"Cancel a LAN queue job"},{"location":"lan-queues/#details","text":"","title":"Details"},{"location":"lan-queues/#lan-queues-manage-jobs-not-setsfiles","text":"Queues operate at the level of a Job (see Sets and Jobs for disambiguation). All work described by the job will be completed by the printer which acquires it. In other words, the work within a job will not be distributed across printers . This is to ensure compatability with future work to support WAN / decentralized network printing, ensuring that all prints of any job are guaranteed to end up in the same physical location.","title":"LAN Queues manage Jobs, not Sets/Files"},{"location":"lan-queues/#queue-strategies","text":"When a printer is done with its job, it will choose the next one based on whichever strategy is configured for the queue it's printing from. There is currently only one strategy: In-Order prints linearly down the queue from top to bottom, one job at a time. In the future, you will be able to customize how your printer works on the queue, e.g. choosing jobs in a way which avoids excessive filament changes and other manual actions. The overall strategy between queues is currently in-order, i.e. all prints in the topmost queue will be executed before moving onto the next queue, and so on. This will eventually change to allow a top-level strategy which dictates which queue to print from.","title":"Queue Strategies"},{"location":"lan-queues/#gcode-limitations","text":"3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). This can be mitigated in one of two ways: Use exactly the same make and model of printer for all members of the LAN queue Configure the correct profiles for all Sets so that each type of printer has its own compatible *.gcode files to fully print the job. Info For users of Kiri:Moto slicer , the second mitigation is automatic: gcode files are automatically analyzed and the printer profile applied when they are added to the queue. See the Printer Profiles page for more details.","title":"GCODE Limitations"},{"location":"lan-queues/#additional-lan-queues","text":"It's straightforward to add additional LAN queues, or remove/modify the default LAN queue if desired: Open OctoPrint's settings page Click through to Continuous Print Click the Queues button to go to the queue settings page. Click the \"Add Queue\" button to add a new LAN queue. Fill in the inputs, but keep in mind: Each queue must have a unique name (which cannot be local and archive - these are reserved) Address:Port must be either set to auto or have the form of ip_address:port (e.g. 192.168.1.43:6789 ) A hostname of localhost will only connect to other OctoPrint instances on the same host. If you're unsure what to specify here, try 0.0.0.0 which binds to all IP addresses on the host . If auto is used, an IP address and port will be selected automatically - this will probably work, but may not be correct for more complicated network setups. Access control may be a factor if you're using a port number below 1024 (see privileged ports ) You may experience silent failures if you specify a port that's already in use by another process. All LAN queues are only visible to other devices on the same network, unless you've taken steps to expose ports (NOT recommended). When you've finished configuring your queues, click Save . If everything is working properly, you'll see the changes reflected in the queues on the Continuous Print tab with the queue(s) you added. It will show no other peers connected to it, but that's because we still have to set them up. Complete steps 1-6 for all remaining printers, and you should see them as peers when you look at the header of the queue.","title":"Additional LAN Queues"},{"location":"managed-bed-cooldown/","text":"Managed Bed Cooldown Use Case Depending on your printer model the g-code instruction M190 (Wait for Bed Temperature) is not always respected when the targed temperature is cooling down. For printers that don't respect the M190 cooldown instruction but depend on the bed cooling to a specified temperature this feature should be enabled. Configure feature This feature can be configured in the Continuous Print settings panel under Bed Cooldown Settings . Enable Managed Bed Cooldown Box enables and disables the feature. Bed Cooldown Script is the G-Code script that will run once print in queue is finished, but before bed cooldown is run. Useful for triggering events via g-code like activating part cooling fan, or moving print head from above part while it cools. Bed Cooldown Threshold is the temperature in Celsius that once met triggers the bed to clear. The goal is to pick a temperature at which the part becomes free from the bed. Example temperature range is around 25 to 35 but depends greatly on your bed material. Experiment to find the best threshold for your printer. Bed Cooldown Timeout a timeout in minutes starting from after the bed clear script has run when once exceeded bed will be cleared regardless of bed temperature. Useful for cases where the target bed temperature is not being met, but the part is ready to be cleared anyway. Useful for cases where the part cools faster than the bed, or external environment is too hot so bed is not meeting temperature, but part has already cooled enough. Once configured the final event flow will look like this PRINT FINISHES -> Bed Cooldown Script Runs -> Bed is turned off -> Wait until measured temp meets threshold OR timeout is exceeded -> Bed Clearing Script Runs -> NEXT PRINT BEGINS","title":"Managed Bed Cooldown"},{"location":"managed-bed-cooldown/#managed-bed-cooldown","text":"","title":"Managed Bed Cooldown"},{"location":"managed-bed-cooldown/#use-case","text":"Depending on your printer model the g-code instruction M190 (Wait for Bed Temperature) is not always respected when the targed temperature is cooling down. For printers that don't respect the M190 cooldown instruction but depend on the bed cooling to a specified temperature this feature should be enabled.","title":"Use Case"},{"location":"managed-bed-cooldown/#configure-feature","text":"This feature can be configured in the Continuous Print settings panel under Bed Cooldown Settings . Enable Managed Bed Cooldown Box enables and disables the feature. Bed Cooldown Script is the G-Code script that will run once print in queue is finished, but before bed cooldown is run. Useful for triggering events via g-code like activating part cooling fan, or moving print head from above part while it cools. Bed Cooldown Threshold is the temperature in Celsius that once met triggers the bed to clear. The goal is to pick a temperature at which the part becomes free from the bed. Example temperature range is around 25 to 35 but depends greatly on your bed material. Experiment to find the best threshold for your printer. Bed Cooldown Timeout a timeout in minutes starting from after the bed clear script has run when once exceeded bed will be cleared regardless of bed temperature. Useful for cases where the target bed temperature is not being met, but the part is ready to be cleared anyway. Useful for cases where the part cools faster than the bed, or external environment is too hot so bed is not meeting temperature, but part has already cooled enough. Once configured the final event flow will look like this PRINT FINISHES -> Bed Cooldown Script Runs -> Bed is turned off -> Wait until measured temp meets threshold OR timeout is exceeded -> Bed Clearing Script Runs -> NEXT PRINT BEGINS","title":"Configure feature"},{"location":"material-selection/","text":"Material Selection Material Selection pauses the queue automatically when you need to change filaments. Follow the steps in this guide to support tagging queued items with specific material requirements. Enabling material selection Octoprint doesn't know by default what spools of filament you have on hand, nor what's loaded into which hotend of your printer. For this reason, we'll need to install SpoolManager , which manages all spool informations and stores it in a database. Follow the setup instructions for SpoolManager, then restart OctoPrint. To confirm everything's operational, go to Settings > Continuous Print and scroll to \"Material Selection\". If you see \"Material selection is enabled\", then you're good to go! Important Continuous Print only knows about the materials that you've defined in SpoolManager. Be sure to add a few spools before trying to select materials, or else you won't see any options available. Selecting materials When you add a new print file to the queue, it assumes nothing about material by default - any material type and color will be used to print it. Materials are implemented at the level of Sets (see here for definition). If you want a set to print in a certain color or material, click the triangle next to its name. If material selection is enabled (as above), you should see drop-down boxes for each extruder your printer has. Select the desired materials for your desired hotends (called \"tools\" in OctoPrint parlance). If you leave a tool empty, it's considered unconstrained - any material will do. As you select materials, you'll see labels appear next to the name of the set. These help indicate at a glance what sets are constrained, and how. You can hover over individual labels to see more details on what material is specified. Behavior When the print queue reaches a set with a specific material selected, it will wait to start the set until you select a matching spool via SpoolManager for every tool with a specified material. Note that the material (e.g. \"PLA\") and the color are all that's matched. If for instance you have more than one spool of black PLA, selecting any of these spools in SpoolManager is sufficient if the print requires black PLA.","title":"Material Selection"},{"location":"material-selection/#material-selection","text":"Material Selection pauses the queue automatically when you need to change filaments. Follow the steps in this guide to support tagging queued items with specific material requirements.","title":"Material Selection"},{"location":"material-selection/#enabling-material-selection","text":"Octoprint doesn't know by default what spools of filament you have on hand, nor what's loaded into which hotend of your printer. For this reason, we'll need to install SpoolManager , which manages all spool informations and stores it in a database. Follow the setup instructions for SpoolManager, then restart OctoPrint. To confirm everything's operational, go to Settings > Continuous Print and scroll to \"Material Selection\". If you see \"Material selection is enabled\", then you're good to go! Important Continuous Print only knows about the materials that you've defined in SpoolManager. Be sure to add a few spools before trying to select materials, or else you won't see any options available.","title":"Enabling material selection"},{"location":"material-selection/#selecting-materials","text":"When you add a new print file to the queue, it assumes nothing about material by default - any material type and color will be used to print it. Materials are implemented at the level of Sets (see here for definition). If you want a set to print in a certain color or material, click the triangle next to its name. If material selection is enabled (as above), you should see drop-down boxes for each extruder your printer has. Select the desired materials for your desired hotends (called \"tools\" in OctoPrint parlance). If you leave a tool empty, it's considered unconstrained - any material will do. As you select materials, you'll see labels appear next to the name of the set. These help indicate at a glance what sets are constrained, and how. You can hover over individual labels to see more details on what material is specified.","title":"Selecting materials"},{"location":"material-selection/#behavior","text":"When the print queue reaches a set with a specific material selected, it will wait to start the set until you select a matching spool via SpoolManager for every tool with a specified material. Note that the material (e.g. \"PLA\") and the color are all that's matched. If for instance you have more than one spool of black PLA, selecting any of these spools in SpoolManager is sufficient if the print requires black PLA.","title":"Behavior"},{"location":"printer-profiles/","text":"Printer Profiles Printer Profiles restrict the make/model of printer that's allowed to print certain files. Why have profiles? 3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). In the case of a single printer running a single OctoPrint instance, this doesn't usually matter - typically only compatible GCODE files will end up in the Files list. But with LAN Queues , multiple kinds of printers may be vying for the same print Job and compatibility becomes a problem. Setting your printer's profile In Settings > Plugins > Continuous Print , in the Scripts > Printer Profile section, select the manufacturer and model of your printer. If your printer is not present in the list, follow these directions to add it. When you click Save , this profile will be associated with your printer. Automatic profile assignment Starting with version 2.1.0 , Continuous Print will attempt to automatically infer the correct printer profile for gcode files added to the queue. This currently only works for Kiri:Moto slicer . If you want your slicer to be supported, open a Feature Request and include an example gcode script that you've sliced as an example. Assigning and removing printer profiles to/from Sets Click the edit (pencil) button on a Job in your queue to enter edit mode. Expand your desired Set by clicking the triangle next to its name. Next to Profiles: you will see a drop-down. Click this and select a matching profile for your printer. A new label should appear with the profile name. You can add additional profiles if your Set can be printed by other printers. Remove any unwanted profiles by clicking the X next to them. Click the \"Save\" button at the bottom of the Job to save your changes. Behavior If a Set has no associated profiles, any printer will attempt to print it. This is fine if you have all the same type of printer, but becomes a hazard if you have multiple incompatible printers sharing the same LAN queue (e.g. a continuous belt printer and a small delta printer). If a Set has one or more associated profiles, your printer will only print it if the printer's profile is present . For instance: a printer with the Generic profile will not print a Set with only a Creality CR30 profile. All sets within jobs in LAN queues MUST have an assigned profile , or else you will not be able to submit them. This is to ensure that gcode files areprinted only by the correct printer.","title":"Printer Profiles"},{"location":"printer-profiles/#printer-profiles","text":"Printer Profiles restrict the make/model of printer that's allowed to print certain files.","title":"Printer Profiles"},{"location":"printer-profiles/#why-have-profiles","text":"3D print slicers generate a *.gcode file for a particular make and model of 3D printer - running that file on a different printer than the one for which it was sliced would likely damage that printer (or maybe just fail to print properly). In the case of a single printer running a single OctoPrint instance, this doesn't usually matter - typically only compatible GCODE files will end up in the Files list. But with LAN Queues , multiple kinds of printers may be vying for the same print Job and compatibility becomes a problem.","title":"Why have profiles?"},{"location":"printer-profiles/#setting-your-printers-profile","text":"In Settings > Plugins > Continuous Print , in the Scripts > Printer Profile section, select the manufacturer and model of your printer. If your printer is not present in the list, follow these directions to add it. When you click Save , this profile will be associated with your printer.","title":"Setting your printer's profile"},{"location":"printer-profiles/#automatic-profile-assignment","text":"Starting with version 2.1.0 , Continuous Print will attempt to automatically infer the correct printer profile for gcode files added to the queue. This currently only works for Kiri:Moto slicer . If you want your slicer to be supported, open a Feature Request and include an example gcode script that you've sliced as an example.","title":"Automatic profile assignment"},{"location":"printer-profiles/#assigning-and-removing-printer-profiles-tofrom-sets","text":"Click the edit (pencil) button on a Job in your queue to enter edit mode. Expand your desired Set by clicking the triangle next to its name. Next to Profiles: you will see a drop-down. Click this and select a matching profile for your printer. A new label should appear with the profile name. You can add additional profiles if your Set can be printed by other printers. Remove any unwanted profiles by clicking the X next to them. Click the \"Save\" button at the bottom of the Job to save your changes.","title":"Assigning and removing printer profiles to/from Sets"},{"location":"printer-profiles/#behavior","text":"If a Set has no associated profiles, any printer will attempt to print it. This is fine if you have all the same type of printer, but becomes a hazard if you have multiple incompatible printers sharing the same LAN queue (e.g. a continuous belt printer and a small delta printer). If a Set has one or more associated profiles, your printer will only print it if the printer's profile is present . For instance: a printer with the Generic profile will not print a Set with only a Creality CR30 profile. All sets within jobs in LAN queues MUST have an assigned profile , or else you will not be able to submit them. This is to ensure that gcode files areprinted only by the correct printer.","title":"Behavior"}]}